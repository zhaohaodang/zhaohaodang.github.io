import{_ as s,c as a,o as i,a4 as t}from"./chunks/framework.BCqbIoqo.js";const e="/assets/sendBeacon.BRnXW-Om.png",_=JSON.parse('{"title":"如何避免在重定向时丢失统计数据","description":"","frontmatter":{"title":"如何避免在重定向时丢失统计数据","date":"2023-05-16T17:45:09.000Z","tag":"JavaScript"},"headers":[],"relativePath":"posts/2023/如何避免在重定向时丢失统计数据.md","filePath":"posts/2023/如何避免在重定向时丢失统计数据.md","lastUpdated":1752485935000}'),n={name:"posts/2023/如何避免在重定向时丢失统计数据.md"},p=t(`<p>在使用神策、火山引擎等数据分析工具的时候，页面重定向时，可能会遇到统计数据丢失的情况。</p><hr><p>一个成熟的解决方法是用 <code>sendBeacon</code>方法。<code>navigator.sendBeacon(url, data)</code>这个方法主要用于在卸载（unload）文档之前向 Web 服务器发送数据，是一个 POST 方法。里面的<code>data</code>参数是可选的，类型为 ArrayBuffer、ArrayBufferView、Blob、DOMString、FormData 或 URLSearchParams。</p><p>在统计数据时，我们常常向后端接口传送一个 JSON 类型的数据，我们知道，这种情况需要前端在发起请求时，设置请求头 <code>content-type=application/json</code>，不设置的话会出问题。 如果只是简单的写成 <code>navigator.sendBeacon(&#39;/api&#39;,{ key: &quot;value&quot; })</code>，这是行不通的，此时请求头里的 <code>Content-Type</code> 为 <code>text/plain;charset=UTF-8</code>, 这不对啊！</p><p>为了将 JSON 数据顺利地传送给后端接口，我们可以通过 Blob 对象，间接为<code>navigator.sendBeacon</code>方法设置请求头，具体代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { key: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> blob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Blob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)], headers);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendBeacon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`/api\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, blob);</span></span></code></pre></div><p>你可以把上面的代码粘贴到浏览器里的 Console 面板，运行一下，你会发现此时的 <code>Content-Type</code> 就是 <code>application/json</code> 了，同时 Request Payload 是 <code>{&quot;key&quot;:&quot;value&quot;}</code>，大功告成！</p><p><img src="`+e+'" alt=""></p>',8),l=[p];function h(o,k,d,r,c,E){return i(),a("div",null,l)}const y=s(n,[["render",h]]);export{_ as __pageData,y as default};
